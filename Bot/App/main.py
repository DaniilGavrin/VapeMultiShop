import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

from config import BOT_TOKEN
from msg import msgbot
from api import API

is_catalog = 0
is_profile = 0
is_accept = 1
is_cart = 0


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞p
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîû –ú–Ω–µ –µ—Å—Ç—å 18 –ª–µ—Ç", callback_data="accept_user")]])
    
    await message.answer(msgbot.start_message(), reply_markup=keyboard)


@dp.message(Command("menu"))
async def send(message: types.Message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url="https://bytewizard.ru/"))],
        [InlineKeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [InlineKeyboardButton(text="–í–∞—à–∏ –∑–∞–∫–∞–∑—ã", callback_data="myorder")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=keyboard)
    
@dp.callback_query(F.data == "cart")
async def cart(message: types.Message):
    if is_cart == 0:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∞–¥–º–∏–Ω –¥–∞—É–Ω –∑–∞–±—ã–ª —Ç–µ—Å—Ç —É–±—Ä–∞—Ç—å")
        return

# TODO: –°–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query(F.data == "profile")
async def profile(callback_query: types.CallbackQuery):
        if is_profile == 0:
            await callback_query.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∞–¥–º–∏–Ω –¥–∞—É–Ω –∑–∞–±—ã–ª —Ç–µ—Å—Ç —É–±—Ä–∞—Ç—å") # type: ignore

        user_id = callback_query.from_user.id
        username = callback_query.from_user.username
        print(user_id)
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        user = API.get_profile(user_id)
        value = user.get("value")
        all_order = user.get("all_order")
        await callback_query.message.answer(f"–í–∞—à id {user_id}.\n–í–∞—à username {username}\n–í—ã –∫—É–ø–∏–ª–∏ –Ω–∞ {value}RUB\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ {all_order}.\n")

@dp.callback_query(F.data == "accept_user")
async def access_user(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞
    if is_accept == 0:
        await callback_query.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞!")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏ username
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    print(f"User ID: {user_id}, Username: {username}")

    
    await callback_query.message.answer(f"User ID: {user_id}, Username: {username}. –í–≤–µ–¥–∏—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –±–æ—Ç–∞")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())